//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\amaur\Documents\Compiladores I\PruebasProyecto\Prueba3\antlrGrammar\tiny.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class tinyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Parentesis=1, Keys=2, Type=3, RelOperator=4, Program=5, If=6, Else=7, 
		Then=8, Fi=9, Do=10, Until=11, While=12, Read=13, Write=14, Float=15, 
		INT=16, Bool=17, NOT=18, Or=19, And=20, True=21, False=22, Equals=23, 
		NEquals=24, GTEquals=25, LTEquals=26, Pow=27, Excl=28, GT=29, LT=30, Add=31, 
		Subtract=32, Multiply=33, Divide=34, Modulus=35, Assign=36, OBrace=37, 
		CBrace=38, OParen=39, CParen=40, SColon=41, Comma=42, Number=43, Identifier=44, 
		String=45, Comment=46, Space=47, ERROR=48;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_lista_declaracion = 2, RULE_declaracion = 3, 
		RULE_lista_id = 4, RULE_lista_sentencias = 5, RULE_sentencia = 6, RULE_seleccion = 7, 
		RULE_iteracion = 8, RULE_repeticion = 9, RULE_sent_read = 10, RULE_sent_write = 11, 
		RULE_bloque = 12, RULE_asignacion = 13, RULE_b_expresion = 14, RULE_b_term = 15, 
		RULE_not_factor = 16, RULE_b_factor = 17, RULE_relacion = 18, RULE_expresion = 19, 
		RULE_termino = 20, RULE_signoFactor = 21, RULE_factor = 22, RULE_sumaOp = 23, 
		RULE_multOp = 24;
	public static readonly string[] ruleNames = {
		"parse", "block", "lista_declaracion", "declaracion", "lista_id", "lista_sentencias", 
		"sentencia", "seleccion", "iteracion", "repeticion", "sent_read", "sent_write", 
		"bloque", "asignacion", "b_expresion", "b_term", "not_factor", "b_factor", 
		"relacion", "expresion", "termino", "signoFactor", "factor", "sumaOp", 
		"multOp"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'program'", "'if'", "'else'", "'then'", 
		"'fi'", "'do'", "'until'", "'while'", "'read'", "'write'", "'float'", 
		"'int'", "'bool'", "'not'", "'or'", "'and'", "'true'", "'false'", "'=='", 
		"'!='", "'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'='", "'{'", "'}'", "'('", "')'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Parentesis", "Keys", "Type", "RelOperator", "Program", "If", "Else", 
		"Then", "Fi", "Do", "Until", "While", "Read", "Write", "Float", "INT", 
		"Bool", "NOT", "Or", "And", "True", "False", "Equals", "NEquals", "GTEquals", 
		"LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", 
		"Divide", "Modulus", "Assign", "OBrace", "CBrace", "OParen", "CParen", 
		"SColon", "Comma", "Number", "Identifier", "String", "Comment", "Space", 
		"ERROR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tiny.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static tinyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public tinyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public tinyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(tinyParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			block();
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Program() { return GetToken(tinyParser.Program, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Keys() { return GetTokens(tinyParser.Keys); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Keys(int i) {
			return GetToken(tinyParser.Keys, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_declaracionContext[] lista_declaracion() {
			return GetRuleContexts<Lista_declaracionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_declaracionContext lista_declaracion(int i) {
			return GetRuleContext<Lista_declaracionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_sentenciasContext[] lista_sentencias() {
			return GetRuleContexts<Lista_sentenciasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_sentenciasContext lista_sentencias(int i) {
			return GetRuleContext<Lista_sentenciasContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(Program);
			State = 54;
			Match(Keys);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Type) {
				{
				{
				State = 55;
				lista_declaracion();
				State = 56;
				lista_sentencias();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			Match(Keys);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_declaracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext[] declaracion() {
			return GetRuleContexts<DeclaracionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionContext declaracion(int i) {
			return GetRuleContext<DeclaracionContext>(i);
		}
		public Lista_declaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_declaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterLista_declaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitLista_declaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_declaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_declaracionContext lista_declaracion() {
		Lista_declaracionContext _localctx = new Lista_declaracionContext(Context, State);
		EnterRule(_localctx, 4, RULE_lista_declaracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 65;
				declaracion();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Type );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(tinyParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_idContext lista_id() {
			return GetRuleContext<Lista_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(tinyParser.SColon, 0); }
		public DeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitDeclaracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionContext declaracion() {
		DeclaracionContext _localctx = new DeclaracionContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(Type);
			State = 71;
			lista_id();
			State = 72;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(tinyParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(tinyParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(tinyParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(tinyParser.Comma, i);
		}
		public Lista_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterLista_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitLista_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_idContext lista_id() {
		Lista_idContext _localctx = new Lista_idContext(Context, State);
		EnterRule(_localctx, 8, RULE_lista_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(Identifier);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 75;
				Match(Comma);
				State = 76;
				Match(Identifier);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_sentenciasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		public Lista_sentenciasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_sentencias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterLista_sentencias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitLista_sentencias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_sentencias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_sentenciasContext lista_sentencias() {
		Lista_sentenciasContext _localctx = new Lista_sentenciasContext(Context, State);
		EnterRule(_localctx, 10, RULE_lista_sentencias);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 82;
					sentencia();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeleccionContext seleccion() {
			return GetRuleContext<SeleccionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteracionContext iteracion() {
			return GetRuleContext<IteracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeticionContext repeticion() {
			return GetRuleContext<RepeticionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sent_readContext sent_read() {
			return GetRuleContext<Sent_readContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sent_writeContext sent_write() {
			return GetRuleContext<Sent_writeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(tinyParser.Comment, 0); }
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterSentencia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitSentencia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentencia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 12, RULE_sentencia);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				seleccion();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				iteracion();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				repeticion();
				}
				break;
			case Read:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				sent_read();
				}
				break;
			case Write:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				sent_write();
				}
				break;
			case Keys:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92;
				bloque();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 7);
				{
				State = 93;
				asignacion();
				}
				break;
			case Comment:
				EnterOuterAlt(_localctx, 8);
				{
				State = 94;
				Match(Comment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeleccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(tinyParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Parentesis() { return GetTokens(tinyParser.Parentesis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parentesis(int i) {
			return GetToken(tinyParser.Parentesis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_expresionContext b_expresion() {
			return GetRuleContext<B_expresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(tinyParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext[] bloque() {
			return GetRuleContexts<BloqueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque(int i) {
			return GetRuleContext<BloqueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fi() { return GetToken(tinyParser.Fi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Else() { return GetTokens(tinyParser.Else); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else(int i) {
			return GetToken(tinyParser.Else, i);
		}
		public SeleccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seleccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterSeleccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitSeleccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeleccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeleccionContext seleccion() {
		SeleccionContext _localctx = new SeleccionContext(Context, State);
		EnterRule(_localctx, 14, RULE_seleccion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(If);
			State = 98;
			Match(Parentesis);
			State = 99;
			b_expresion();
			State = 100;
			Match(Parentesis);
			State = 101;
			Match(Then);
			State = 102;
			bloque();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Else) {
				{
				{
				State = 103;
				Match(Else);
				State = 104;
				bloque();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(Fi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(tinyParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Parentesis() { return GetTokens(tinyParser.Parentesis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parentesis(int i) {
			return GetToken(tinyParser.Parentesis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_expresionContext b_expresion() {
			return GetRuleContext<B_expresionContext>(0);
		}
		public IteracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterIteracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitIteracion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteracionContext iteracion() {
		IteracionContext _localctx = new IteracionContext(Context, State);
		EnterRule(_localctx, 16, RULE_iteracion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(While);
			State = 113;
			Match(Parentesis);
			State = 114;
			b_expresion();
			State = 115;
			Match(Parentesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeticionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(tinyParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(tinyParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Parentesis() { return GetTokens(tinyParser.Parentesis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parentesis(int i) {
			return GetToken(tinyParser.Parentesis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_expresionContext b_expresion() {
			return GetRuleContext<B_expresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(tinyParser.SColon, 0); }
		public RepeticionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeticion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterRepeticion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitRepeticion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeticion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeticionContext repeticion() {
		RepeticionContext _localctx = new RepeticionContext(Context, State);
		EnterRule(_localctx, 18, RULE_repeticion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(Do);
			State = 118;
			bloque();
			State = 119;
			Match(Until);
			State = 120;
			Match(Parentesis);
			State = 121;
			b_expresion();
			State = 122;
			Match(Parentesis);
			State = 123;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sent_readContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Read() { return GetToken(tinyParser.Read, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(tinyParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(tinyParser.SColon, 0); }
		public Sent_readContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sent_read; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterSent_read(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitSent_read(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSent_read(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sent_readContext sent_read() {
		Sent_readContext _localctx = new Sent_readContext(Context, State);
		EnterRule(_localctx, 20, RULE_sent_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(Read);
			State = 126;
			Match(Identifier);
			State = 127;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sent_writeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Write() { return GetToken(tinyParser.Write, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_expresionContext b_expresion() {
			return GetRuleContext<B_expresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(tinyParser.SColon, 0); }
		public Sent_writeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sent_write; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterSent_write(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitSent_write(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSent_write(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sent_writeContext sent_write() {
		Sent_writeContext _localctx = new Sent_writeContext(Context, State);
		EnterRule(_localctx, 22, RULE_sent_write);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(Write);
			State = 130;
			b_expresion();
			State = 131;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Keys() { return GetTokens(tinyParser.Keys); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Keys(int i) {
			return GetToken(tinyParser.Keys, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_sentenciasContext lista_sentencias() {
			return GetRuleContext<Lista_sentenciasContext>(0);
		}
		public BloqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloque; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloqueContext bloque() {
		BloqueContext _localctx = new BloqueContext(Context, State);
		EnterRule(_localctx, 24, RULE_bloque);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(Keys);
			State = 134;
			lista_sentencias();
			State = 135;
			Match(Keys);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(tinyParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(tinyParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_expresionContext b_expresion() {
			return GetRuleContext<B_expresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(tinyParser.SColon, 0); }
		public AsignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterAsignacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitAsignacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionContext asignacion() {
		AsignacionContext _localctx = new AsignacionContext(Context, State);
		EnterRule(_localctx, 26, RULE_asignacion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(Identifier);
			State = 138;
			Match(Assign);
			State = 139;
			b_expresion();
			State = 140;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_expresionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_termContext[] b_term() {
			return GetRuleContexts<B_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_termContext b_term(int i) {
			return GetRuleContext<B_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(tinyParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(tinyParser.Or, i);
		}
		public B_expresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_expresion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterB_expresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitB_expresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB_expresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public B_expresionContext b_expresion() {
		B_expresionContext _localctx = new B_expresionContext(Context, State);
		EnterRule(_localctx, 28, RULE_b_expresion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			b_term();
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 143;
				Match(Or);
				State = 144;
				b_term();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not_factorContext[] not_factor() {
			return GetRuleContexts<Not_factorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_factorContext not_factor(int i) {
			return GetRuleContext<Not_factorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(tinyParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(tinyParser.And, i);
		}
		public B_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterB_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitB_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public B_termContext b_term() {
		B_termContext _localctx = new B_termContext(Context, State);
		EnterRule(_localctx, 30, RULE_b_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			not_factor();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 151;
				Match(And);
				State = 152;
				not_factor();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_factorContext b_factor() {
			return GetRuleContext<B_factorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Excl() { return GetTokens(tinyParser.Excl); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Excl(int i) {
			return GetToken(tinyParser.Excl, i);
		}
		public Not_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterNot_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitNot_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_factorContext not_factor() {
		Not_factorContext _localctx = new Not_factorContext(Context, State);
		EnterRule(_localctx, 32, RULE_not_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Excl) {
				{
				{
				State = 158;
				Match(Excl);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164;
			b_factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_factorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] True() { return GetTokens(tinyParser.True); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True(int i) {
			return GetToken(tinyParser.True, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] False() { return GetTokens(tinyParser.False); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False(int i) {
			return GetToken(tinyParser.False, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelacionContext relacion() {
			return GetRuleContext<RelacionContext>(0);
		}
		public B_factorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterB_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitB_factor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB_factor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public B_factorContext b_factor() {
		B_factorContext _localctx = new B_factorContext(Context, State);
		EnterRule(_localctx, 34, RULE_b_factor);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 166;
					_la = TokenStream.LA(1);
					if ( !(_la==True || _la==False) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==True || _la==False );
				}
				break;
			case Parentesis:
			case Add:
			case Subtract:
			case Number:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				relacion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RelOperator() { return GetTokens(tinyParser.RelOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RelOperator(int i) {
			return GetToken(tinyParser.RelOperator, i);
		}
		public RelacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterRelacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitRelacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelacionContext relacion() {
		RelacionContext _localctx = new RelacionContext(Context, State);
		EnterRule(_localctx, 36, RULE_relacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			expresion();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RelOperator) {
				{
				{
				State = 175;
				Match(RelOperator);
				State = 176;
				expresion();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TerminoContext[] termino() {
			return GetRuleContexts<TerminoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminoContext termino(int i) {
			return GetRuleContext<TerminoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumaOpContext[] sumaOp() {
			return GetRuleContexts<SumaOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumaOpContext sumaOp(int i) {
			return GetRuleContext<SumaOpContext>(i);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expresion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			termino();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Add || _la==Subtract) {
				{
				{
				State = 183;
				sumaOp();
				State = 184;
				termino();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignoFactorContext[] signoFactor() {
			return GetRuleContexts<SignoFactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignoFactorContext signoFactor(int i) {
			return GetRuleContext<SignoFactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext[] multOp() {
			return GetRuleContexts<MultOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp(int i) {
			return GetRuleContext<MultOpContext>(i);
		}
		public TerminoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termino; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterTermino(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitTermino(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermino(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminoContext termino() {
		TerminoContext _localctx = new TerminoContext(Context, State);
		EnterRule(_localctx, 40, RULE_termino);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			signoFactor();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) {
				{
				{
				State = 192;
				multOp();
				State = 193;
				signoFactor();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignoFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumaOpContext[] sumaOp() {
			return GetRuleContexts<SumaOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumaOpContext sumaOp(int i) {
			return GetRuleContext<SumaOpContext>(i);
		}
		public SignoFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signoFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterSignoFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitSignoFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignoFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignoFactorContext signoFactor() {
		SignoFactorContext _localctx = new SignoFactorContext(Context, State);
		EnterRule(_localctx, 42, RULE_signoFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Add || _la==Subtract) {
				{
				{
				State = 200;
				sumaOp();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Parentesis() { return GetTokens(tinyParser.Parentesis); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parentesis(int i) {
			return GetToken(tinyParser.Parentesis, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_expresionContext b_expresion() {
			return GetRuleContext<B_expresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(tinyParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(tinyParser.Identifier, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 44, RULE_factor);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Parentesis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(Parentesis);
				State = 209;
				b_expresion();
				State = 210;
				Match(Parentesis);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(Number);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumaOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Add() { return GetTokens(tinyParser.Add); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add(int i) {
			return GetToken(tinyParser.Add, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Subtract() { return GetTokens(tinyParser.Subtract); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract(int i) {
			return GetToken(tinyParser.Subtract, i);
		}
		public SumaOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumaOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterSumaOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitSumaOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumaOpContext sumaOp() {
		SumaOpContext _localctx = new SumaOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_sumaOp);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 216;
					_la = TokenStream.LA(1);
					if ( !(_la==Add || _la==Subtract) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiply() { return GetTokens(tinyParser.Multiply); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply(int i) {
			return GetToken(tinyParser.Multiply, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Divide() { return GetTokens(tinyParser.Divide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide(int i) {
			return GetToken(tinyParser.Divide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Modulus() { return GetTokens(tinyParser.Modulus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus(int i) {
			return GetToken(tinyParser.Modulus, i);
		}
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItinyListener typedListener = listener as ItinyListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinyVisitor<TResult> typedVisitor = visitor as ItinyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 221;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\xE5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '=', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '@', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x6', '\x4', '\x45', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x46', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'P', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'S', '\v', '\x6', '\x3', '\a', '\x6', '\a', 'V', '\n', '\a', 
		'\r', '\a', '\xE', '\a', 'W', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x62', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'l', '\n', 
		'\t', '\f', '\t', '\xE', '\t', 'o', '\v', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x94', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x97', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x9C', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x9F', 
		'\v', '\x11', '\x3', '\x12', '\a', '\x12', '\xA2', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xA5', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x6', '\x13', '\xAA', '\n', '\x13', '\r', '\x13', '\xE', 
		'\x13', '\xAB', '\x3', '\x13', '\x5', '\x13', '\xAF', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xB4', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\xB7', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xBD', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\xC0', '\v', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xC6', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\xC9', '\v', '\x16', '\x3', '\x17', '\a', 
		'\x17', '\xCC', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xCF', '\v', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xD9', 
		'\n', '\x18', '\x3', '\x19', '\x6', '\x19', '\xDC', '\n', '\x19', '\r', 
		'\x19', '\xE', '\x19', '\xDD', '\x3', '\x1A', '\x6', '\x1A', '\xE1', '\n', 
		'\x1A', '\r', '\x1A', '\xE', '\x1A', '\xE2', '\x3', '\x1A', '\x2', '\x2', 
		'\x1B', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x2', '\x5', '\x3', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '!', '\"', '\x3', '\x2', '#', '%', '\x2', '\xE4', '\x2', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x44', '\x3', '\x2', '\x2', '\x2', '\b', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'L', '\x3', '\x2', '\x2', '\x2', '\f', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x61', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x12', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'w', '\x3', '\x2', '\x2', '\x2', '\x16', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x83', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x90', '\x3', '\x2', '\x2', '\x2', ' ', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xA3', '\x3', '\x2', '\x2', '\x2', '$', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xB0', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '*', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xCD', '\x3', '\x2', '\x2', '\x2', '.', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x32', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\x4', '\x3', '\x2', 
		'\x35', '\x36', '\a', '\x2', '\x2', '\x3', '\x36', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\a', '\x2', '\x2', '\x38', '>', '\a', 
		'\x4', '\x2', '\x2', '\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', ';', 
		'\x5', '\f', '\a', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', '>', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x4', '\x2', '\x2', '\x42', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\x5', '\b', '\x5', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\a', '\x5', '\x2', '\x2', 'I', 'J', '\x5', '\n', '\x6', '\x2', 'J', 'K', 
		'\a', '+', '\x2', '\x2', 'K', '\t', '\x3', '\x2', '\x2', '\x2', 'L', 'Q', 
		'\a', '.', '\x2', '\x2', 'M', 'N', '\a', ',', '\x2', '\x2', 'N', 'P', 
		'\a', '.', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'S', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\x3', '\x2', '\x2', '\x2', 'R', '\v', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x5', '\xE', '\b', '\x2', 
		'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', '\r', '\x3', '\x2', '\x2', '\x2', 'Y', '\x62', '\x5', '\x10', '\t', 
		'\x2', 'Z', '\x62', '\x5', '\x12', '\n', '\x2', '[', '\x62', '\x5', '\x14', 
		'\v', '\x2', '\\', '\x62', '\x5', '\x16', '\f', '\x2', ']', '\x62', '\x5', 
		'\x18', '\r', '\x2', '^', '\x62', '\x5', '\x1A', '\xE', '\x2', '_', '\x62', 
		'\x5', '\x1C', '\xF', '\x2', '`', '\x62', '\a', '\x30', '\x2', '\x2', 
		'\x61', 'Y', '\x3', '\x2', '\x2', '\x2', '\x61', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '[', '\x3', '\x2', '\x2', '\x2', '\x61', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x61', ']', '\x3', '\x2', '\x2', '\x2', '\x61', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\b', '\x2', '\x2', '\x64', '\x65', '\a', '\x3', 
		'\x2', '\x2', '\x65', '\x66', '\x5', '\x1E', '\x10', '\x2', '\x66', 'g', 
		'\a', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\n', '\x2', '\x2', 'h', 'm', 
		'\x5', '\x1A', '\xE', '\x2', 'i', 'j', '\a', '\t', '\x2', '\x2', 'j', 
		'l', '\x5', '\x1A', '\xE', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\v', '\x2', '\x2', 
		'q', '\x11', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\xE', '\x2', 
		'\x2', 's', 't', '\a', '\x3', '\x2', '\x2', 't', 'u', '\x5', '\x1E', '\x10', 
		'\x2', 'u', 'v', '\a', '\x3', '\x2', '\x2', 'v', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\a', '\f', '\x2', '\x2', 'x', 'y', '\x5', '\x1A', 
		'\xE', '\x2', 'y', 'z', '\a', '\r', '\x2', '\x2', 'z', '{', '\a', '\x3', 
		'\x2', '\x2', '{', '|', '\x5', '\x1E', '\x10', '\x2', '|', '}', '\a', 
		'\x3', '\x2', '\x2', '}', '~', '\a', '+', '\x2', '\x2', '~', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\xF', '\x2', '\x2', '\x80', 
		'\x81', '\a', '.', '\x2', '\x2', '\x81', '\x82', '\a', '+', '\x2', '\x2', 
		'\x82', '\x17', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x10', 
		'\x2', '\x2', '\x84', '\x85', '\x5', '\x1E', '\x10', '\x2', '\x85', '\x86', 
		'\a', '+', '\x2', '\x2', '\x86', '\x19', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\x4', '\x2', '\x2', '\x88', '\x89', '\x5', '\f', '\a', 
		'\x2', '\x89', '\x8A', '\a', '\x4', '\x2', '\x2', '\x8A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '.', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '&', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x1E', '\x10', 
		'\x2', '\x8E', '\x8F', '\a', '+', '\x2', '\x2', '\x8F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x95', '\x5', ' ', '\x11', '\x2', '\x91', 
		'\x92', '\a', '\x15', '\x2', '\x2', '\x92', '\x94', '\x5', ' ', '\x11', 
		'\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9D', '\x5', 
		'\"', '\x12', '\x2', '\x99', '\x9A', '\a', '\x16', '\x2', '\x2', '\x9A', 
		'\x9C', '\x5', '\"', '\x12', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA2', '\a', '\x1E', '\x2', '\x2', '\xA1', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', '$', '\x13', '\x2', '\xA7', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\t', '\x2', '\x2', '\x2', 
		'\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAF', '\x5', '&', '\x14', '\x2', '\xAE', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB5', '\x5', '(', '\x15', '\x2', 
		'\xB1', '\xB2', '\a', '\x6', '\x2', '\x2', '\xB2', '\xB4', '\x5', '(', 
		'\x15', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBE', 
		'\x5', '*', '\x16', '\x2', '\xB9', '\xBA', '\x5', '\x30', '\x19', '\x2', 
		'\xBA', '\xBB', '\x5', '*', '\x16', '\x2', '\xBB', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC7', 
		'\x5', ',', '\x17', '\x2', '\xC2', '\xC3', '\x5', '\x32', '\x1A', '\x2', 
		'\xC3', '\xC4', '\x5', ',', '\x17', '\x2', '\xC4', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', 
		'\x5', '\x30', '\x19', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\x5', '.', '\x18', '\x2', '\xD1', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\a', '\x3', '\x2', '\x2', '\xD3', '\xD4', 
		'\x5', '\x1E', '\x10', '\x2', '\xD4', '\xD5', '\a', '\x3', '\x2', '\x2', 
		'\xD5', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', '\a', '-', 
		'\x2', '\x2', '\xD7', '\xD9', '\a', '.', '\x2', '\x2', '\xD8', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDC', '\t', '\x3', '\x2', '\x2', '\xDB', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x31', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE1', 
		'\t', '\x4', '\x2', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '>', '\x46', 'Q', 'W', '\x61', 'm', 
		'\x95', '\x9D', '\xA3', '\xAB', '\xAE', '\xB5', '\xBE', '\xC7', '\xCD', 
		'\xD8', '\xDD', '\xE2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
